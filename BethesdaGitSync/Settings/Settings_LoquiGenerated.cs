/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using BethesdaGitSync.Internals;
using ReactiveUI;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace BethesdaGitSync
{
    #region Class
    public partial class Settings : 
        LoquiNotifyingObject,
        ISettings,
        ILoquiObject<Settings>,
        ILoquiObjectSetter,
        IEquatable<Settings>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Settings_Registration.Instance;
        public static Settings_Registration Registration => Settings_Registration.Instance;

        #region Ctor
        public Settings()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Mappings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<Mapping> _Mappings = new SourceSetList<Mapping>();
        public ISourceSetList<Mapping> Mappings => _Mappings;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Mapping> MappingsEnumerable
        {
            get => _Mappings.Items;
            set => _Mappings.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<Mapping> ISettings.Mappings => _Mappings;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<Mapping> ISettingsGetter.Mappings => _Mappings;
        #endregion

        #endregion
        #region LastReferencedDirectory
        private String _LastReferencedDirectory;
        public String LastReferencedDirectory
        {
            get => this._LastReferencedDirectory;
            set => this.RaiseAndSetIfChanged(ref this._LastReferencedDirectory, value, nameof(LastReferencedDirectory));
        }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => SettingsCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => SettingsCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => SettingsCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            SettingsCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<Settings>.GetEqualsMask(Settings rhs, EqualsMaskHelper.Include include) => SettingsCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ISettingsGetter>.GetEqualsMask(ISettingsGetter rhs, EqualsMaskHelper.Include include) => SettingsCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            Settings_Mask<bool> printMask = null)
        {
            return SettingsCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            SettingsCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public Settings_Mask<bool> GetHasBeenSetMask()
        {
            return SettingsCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Settings rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Settings rhs)
        {
            if (rhs == null) return false;
            if (!this.Mappings.SequenceEqual(rhs.Mappings)) return false;
            if (!object.Equals(this.LastReferencedDirectory, rhs.LastReferencedDirectory)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Mappings).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LastReferencedDirectory).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Settings Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Settings_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Settings Create_Xml(
            XElement node,
            out Settings_ErrorMask errorMask,
            bool doMasks = true,
            Settings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Settings_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Settings Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Settings() : null;
                    break;
                default:
                    break;
            }
            var ret = new Settings();
            try
            {
                foreach (var elem in node.Elements())
                {
                    SettingsCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Settings Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Settings_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Settings Create_Xml(
            string path,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Settings Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Settings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Settings Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Settings_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Settings Create_Xml(
            Stream stream,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Settings Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Settings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Settings_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Settings>.Instance.CopyIn(
                missing: missing,
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            NotifyingFireParameters cmds = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Settings_ErrorMask errorMask,
            bool doMasks = true,
            Settings_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Settings_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            Settings_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            SettingsCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Settings_FieldIndex)index)
            {
                case Settings_FieldIndex.Mappings:
                case Settings_FieldIndex.LastReferencedDirectory:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public Settings Copy(
            Settings_CopyMask copyMask = null,
            ISettingsGetter def = null)
        {
            return Settings.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Settings Copy(
            ISettings item,
            Settings_CopyMask copyMask = null,
            ISettingsGetter def = null)
        {
            Settings ret;
            if (item.GetType().Equals(typeof(Settings)))
            {
                ret = new Settings();
            }
            else
            {
                ret = (Settings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Settings Copy_ToLoqui(
            ISettingsGetter item,
            Settings_CopyMask copyMask = null,
            ISettingsGetter def = null)
        {
            Settings ret;
            if (item.GetType().Equals(typeof(Settings)))
            {
                ret = new Settings() as Settings;
            }
            else
            {
                ret = (Settings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ISettingsGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (ISettingsGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ISettingsGetter rhs,
            Settings_CopyMask copyMask,
            ISettingsGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ISettingsGetter rhs,
            out Settings_ErrorMask errorMask,
            Settings_CopyMask copyMask = null,
            ISettingsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SettingsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Settings_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ISettingsGetter rhs,
            ErrorMaskBuilder errorMask,
            Settings_CopyMask copyMask = null,
            ISettingsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            SettingsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                    this._Mappings.SetTo((IEnumerable<Mapping>)obj);
                    break;
                case Settings_FieldIndex.LastReferencedDirectory:
                    this.LastReferencedDirectory = (String)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            SettingsCommon.Clear(this, cmds);
        }


        public static Settings Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Settings();
            foreach (var pair in fields)
            {
                CopyInInternal_Settings(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Settings(Settings obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Settings_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                    obj._Mappings.SetTo((IEnumerable<Mapping>)pair.Value);
                    break;
                case Settings_FieldIndex.LastReferencedDirectory:
                    obj.LastReferencedDirectory = (String)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Settings obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ISettings : ISettingsGetter, ILoquiClass<ISettings, ISettingsGetter>, ILoquiClass<Settings, ISettingsGetter>
    {
        new ISourceSetList<Mapping> Mappings { get; }
        new String LastReferencedDirectory { get; set; }

    }

    public partial interface ISettingsGetter : ILoquiObject
    {
        #region Mappings
        IObservableSetList<Mapping> Mappings { get; }
        #endregion
        #region LastReferencedDirectory
        String LastReferencedDirectory { get; }

        #endregion

    }

    #endregion

}

namespace BethesdaGitSync.Internals
{
    #region Field Index
    public enum Settings_FieldIndex
    {
        Mappings = 0,
        LastReferencedDirectory = 1,
    }
    #endregion

    #region Registration
    public class Settings_Registration : ILoquiRegistration
    {
        public static readonly Settings_Registration Instance = new Settings_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_BethesdaGitSync.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_BethesdaGitSync.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "8769086b-f201-4c59-8d96-1756a9401af5";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(Settings_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Settings_ErrorMask);

        public static readonly Type ClassType = typeof(Settings);

        public static readonly Type GetterType = typeof(ISettingsGetter);

        public static readonly Type SetterType = typeof(ISettings);

        public static readonly Type CommonType = typeof(SettingsCommon);

        public const string FullName = "BethesdaGitSync.Settings";

        public const string Name = "Settings";

        public const string Namespace = "BethesdaGitSync";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MAPPINGS":
                    return (ushort)Settings_FieldIndex.Mappings;
                case "LASTREFERENCEDDIRECTORY":
                    return (ushort)Settings_FieldIndex.LastReferencedDirectory;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                    return true;
                case Settings_FieldIndex.LastReferencedDirectory:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                    return true;
                case Settings_FieldIndex.LastReferencedDirectory:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                case Settings_FieldIndex.LastReferencedDirectory:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                    return "Mappings";
                case Settings_FieldIndex.LastReferencedDirectory:
                    return "LastReferencedDirectory";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                case Settings_FieldIndex.LastReferencedDirectory:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                case Settings_FieldIndex.LastReferencedDirectory:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                    return typeof(SourceSetList<Mapping>);
                case Settings_FieldIndex.LastReferencedDirectory:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class SettingsCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ISettings item,
            ISettingsGetter rhs,
            ISettingsGetter def,
            ErrorMaskBuilder errorMask,
            Settings_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Mappings.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Settings_FieldIndex.Mappings);
                try
                {
                    item.Mappings.SetToWithDefault(
                        rhs: rhs.Mappings,
                        def: def?.Mappings,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Mappings.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return Mapping.Copy(
                                        r,
                                        copyMask?.Mappings?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Mappings.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LastReferencedDirectory ?? true)
            {
                errorMask?.PushIndex((int)Settings_FieldIndex.LastReferencedDirectory);
                try
                {
                    item.LastReferencedDirectory = rhs.LastReferencedDirectory;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ISettings obj,
            NotifyingFireParameters cmds = null)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                case Settings_FieldIndex.LastReferencedDirectory:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ISettings obj,
            NotifyingUnsetParameters cmds = null)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                    obj.Mappings.Unset();
                    break;
                case Settings_FieldIndex.LastReferencedDirectory:
                    obj.LastReferencedDirectory = default(String);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ISettings obj)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                case Settings_FieldIndex.LastReferencedDirectory:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ISettingsGetter obj)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                    return obj.Mappings;
                case Settings_FieldIndex.LastReferencedDirectory:
                    return obj.LastReferencedDirectory;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ISettings item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Mappings.Unset();
            item.LastReferencedDirectory = default(String);
        }

        public static Settings_Mask<bool> GetEqualsMask(
            this ISettingsGetter item,
            ISettingsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Settings_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ISettingsGetter item,
            ISettingsGetter rhs,
            Settings_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Mappings = item.Mappings.CollectionEqualsHelper(
                rhs.Mappings,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LastReferencedDirectory = object.Equals(item.LastReferencedDirectory, rhs.LastReferencedDirectory);
        }

        public static string ToString(
            this ISettingsGetter item,
            string name = null,
            Settings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ISettingsGetter item,
            FileGeneration fg,
            string name = null,
            Settings_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Settings)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Settings)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Mappings?.Overall ?? true)
                {
                    fg.AppendLine("Mappings =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Mappings)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.LastReferencedDirectory ?? true)
                {
                    fg.AppendLine($"LastReferencedDirectory => {item.LastReferencedDirectory}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ISettingsGetter item,
            Settings_Mask<bool?> checkMask)
        {
            if (checkMask.Mappings.Overall.HasValue && checkMask.Mappings.Overall.Value != item.Mappings.HasBeenSet) return false;
            return true;
        }

        public static Settings_Mask<bool> GetHasBeenSetMask(ISettingsGetter item)
        {
            var ret = new Settings_Mask<bool>();
            ret.Mappings = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Mapping_Mask<bool>>>>(item.Mappings.HasBeenSet, item.Mappings.WithIndex().Select((i) => new MaskItemIndexed<bool, Mapping_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            ret.LastReferencedDirectory = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            ISettingsGetter item,
            bool doMasks,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Settings_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            ISettingsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "BethesdaGitSync.Settings");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "BethesdaGitSync.Settings");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this ISettingsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Settings_FieldIndex.Mappings) ?? true))
            {
                ListXmlTranslation<Mapping>.Instance.Write(
                    node: node,
                    name: nameof(item.Mappings),
                    item: item.Mappings,
                    fieldIndex: (int)Settings_FieldIndex.Mappings,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Settings_FieldIndex.Mappings),
                    transl: (XElement subNode, Mapping subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<Mapping>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if ((translationMask?.GetShouldTranslate((int)Settings_FieldIndex.LastReferencedDirectory) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LastReferencedDirectory),
                    item: item.LastReferencedDirectory,
                    fieldIndex: (int)Settings_FieldIndex.LastReferencedDirectory,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this Settings item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SettingsCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this Settings item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Mappings":
                    try
                    {
                        errorMask?.PushIndex((int)Settings_FieldIndex.Mappings);
                        if (ListXmlTranslation<Mapping>.Instance.Parse(
                            node: node,
                            enumer: out var MappingsItem,
                            transl: LoquiXmlTranslation<Mapping>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Mappings.SetTo(MappingsItem);
                        }
                        else
                        {
                            item.Mappings.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LastReferencedDirectory":
                    try
                    {
                        errorMask?.PushIndex((int)Settings_FieldIndex.LastReferencedDirectory);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String LastReferencedDirectoryParse,
                            errorMask: errorMask))
                        {
                            item.LastReferencedDirectory = LastReferencedDirectoryParse;
                        }
                        else
                        {
                            item.LastReferencedDirectory = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Settings_Mask<T> : IMask<T>, IEquatable<Settings_Mask<T>>
    {
        #region Ctors
        public Settings_Mask()
        {
        }

        public Settings_Mask(T initialValue)
        {
            this.Mappings = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Mapping_Mask<T>>>>(initialValue, null);
            this.LastReferencedDirectory = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Mapping_Mask<T>>>> Mappings;
        public T LastReferencedDirectory;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Settings_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Settings_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Mappings, rhs.Mappings)) return false;
            if (!object.Equals(this.LastReferencedDirectory, rhs.LastReferencedDirectory)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Mappings?.GetHashCode());
            ret = ret.CombineHashCode(this.LastReferencedDirectory?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (this.Mappings != null)
            {
                if (!eval(this.Mappings.Overall)) return false;
                if (this.Mappings.Specific != null)
                {
                    foreach (var item in this.Mappings.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.LastReferencedDirectory)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Settings_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Settings_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Settings_Mask<R> obj, Func<T, R> eval)
        {
            if (Mappings != null)
            {
                obj.Mappings = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Mapping_Mask<R>>>>();
                obj.Mappings.Overall = eval(this.Mappings.Overall);
                if (Mappings.Specific != null)
                {
                    List<MaskItemIndexed<R, Mapping_Mask<R>>> l = new List<MaskItemIndexed<R, Mapping_Mask<R>>>();
                    obj.Mappings.Specific = l;
                    foreach (var item in Mappings.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Mapping_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Mapping_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.LastReferencedDirectory = eval(this.LastReferencedDirectory);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Mappings.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Settings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Settings_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Settings_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Mappings?.Overall ?? true)
                {
                    fg.AppendLine("Mappings =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Mappings.Overall != null)
                        {
                            fg.AppendLine(Mappings.Overall.ToString());
                        }
                        if (Mappings.Specific != null)
                        {
                            foreach (var subItem in Mappings.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.LastReferencedDirectory ?? true)
                {
                    fg.AppendLine($"LastReferencedDirectory => {LastReferencedDirectory}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Settings_ErrorMask : IErrorMask, IErrorMask<Settings_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Mapping_ErrorMask>>> Mappings;
        public Exception LastReferencedDirectory;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                    return Mappings;
                case Settings_FieldIndex.LastReferencedDirectory:
                    return LastReferencedDirectory;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                    this.Mappings = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Mapping_ErrorMask>>>(ex, null);
                    break;
                case Settings_FieldIndex.LastReferencedDirectory:
                    this.LastReferencedDirectory = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Mappings:
                    this.Mappings = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Mapping_ErrorMask>>>)obj;
                    break;
                case Settings_FieldIndex.LastReferencedDirectory:
                    this.LastReferencedDirectory = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Mappings != null) return true;
            if (LastReferencedDirectory != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Settings_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine("Mappings =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Mappings.Overall != null)
                {
                    fg.AppendLine(Mappings.Overall.ToString());
                }
                if (Mappings.Specific != null)
                {
                    foreach (var subItem in Mappings.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"LastReferencedDirectory => {LastReferencedDirectory}");
        }
        #endregion

        #region Combine
        public Settings_ErrorMask Combine(Settings_ErrorMask rhs)
        {
            var ret = new Settings_ErrorMask();
            ret.Mappings = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Mapping_ErrorMask>>>(this.Mappings.Overall.Combine(rhs.Mappings.Overall), new List<MaskItem<Exception, Mapping_ErrorMask>>(this.Mappings.Specific.And(rhs.Mappings.Specific)));
            ret.LastReferencedDirectory = this.LastReferencedDirectory.Combine(rhs.LastReferencedDirectory);
            return ret;
        }
        public static Settings_ErrorMask Combine(Settings_ErrorMask lhs, Settings_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Settings_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Settings_ErrorMask();
        }
        #endregion

    }
    public class Settings_CopyMask
    {
        public Settings_CopyMask()
        {
        }

        public Settings_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Mappings = new MaskItem<CopyOption, Mapping_CopyMask>(deepCopyOption, default);
            this.LastReferencedDirectory = defaultOn;
        }

        #region Members
        public MaskItem<CopyOption, Mapping_CopyMask> Mappings;
        public bool LastReferencedDirectory;
        #endregion

    }

    public class Settings_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public MaskItem<bool, Mapping_TranslationMask> Mappings;
        public bool LastReferencedDirectory;
        #endregion

        #region Ctors
        public Settings_TranslationMask()
        {
        }

        public Settings_TranslationMask(bool defaultOn)
        {
            this.Mappings = new MaskItem<bool, Mapping_TranslationMask>(defaultOn, null);
            this.LastReferencedDirectory = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Mappings?.Overall ?? true, Mappings?.Specific?.GetCrystal()));
            ret.Add((LastReferencedDirectory, null));
        }
    }
    #endregion

    #endregion

}
