/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using BethesdaGitSync.Internals;
using ReactiveUI;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace BethesdaGitSync
{
    #region Class
    public partial class Mapping : 
        LoquiNotifyingObject,
        IMapping,
        ILoquiObject<Mapping>,
        ILoquiObjectSetter,
        IEquatable<Mapping>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Mapping_Registration.Instance;
        public static Mapping_Registration Registration => Mapping_Registration.Instance;

        #region Ctor
        public Mapping()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Nickname
        private String _Nickname;
        public String Nickname
        {
            get => this._Nickname;
            set => this.RaiseAndSetIfReferenceChanged(ref this._Nickname, value, nameof(Nickname));
        }
        #endregion
        #region BinaryPath
        private FilePath _BinaryPath;
        public FilePath BinaryPath
        {
            get => this._BinaryPath;
            set => this.RaiseAndSetIfChanged(ref this._BinaryPath, value, nameof(BinaryPath));
        }
        #endregion
        #region FolderPath
        private DirectoryPath _FolderPath;
        public DirectoryPath FolderPath
        {
            get => this._FolderPath;
            set => this.RaiseAndSetIfChanged(ref this._FolderPath, value, nameof(FolderPath));
        }
        #endregion

        IMask<bool> IEqualsMask<Mapping>.GetEqualsMask(Mapping rhs, EqualsMaskHelper.Include include) => MappingCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IMappingGetter>.GetEqualsMask(IMappingGetter rhs, EqualsMaskHelper.Include include) => MappingCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            Mapping_Mask<bool> printMask = null)
        {
            return MappingCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            MappingCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public Mapping_Mask<bool> GetHasBeenSetMask()
        {
            return MappingCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Mapping rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Mapping rhs)
        {
            if (rhs == null) return false;
            if (!string.Equals(this.Nickname, rhs.Nickname)) return false;
            if (!string.Equals(this.BinaryPath, rhs.BinaryPath)) return false;
            if (!string.Equals(this.FolderPath, rhs.FolderPath)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Nickname).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BinaryPath).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FolderPath).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Mapping Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Mapping_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Mapping Create_Xml(
            XElement node,
            out Mapping_ErrorMask errorMask,
            bool doMasks = true,
            Mapping_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Mapping_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Mapping Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Mapping() : null;
                    break;
                default:
                    break;
            }
            var ret = new Mapping();
            try
            {
                foreach (var elem in node.Elements())
                {
                    MappingCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Mapping Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Mapping_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Mapping Create_Xml(
            string path,
            out Mapping_ErrorMask errorMask,
            Mapping_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Mapping Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Mapping_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Mapping Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Mapping_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Mapping Create_Xml(
            Stream stream,
            out Mapping_ErrorMask errorMask,
            Mapping_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Mapping Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Mapping_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New)
        {
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out Mapping_ErrorMask errorMask,
            Mapping_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Mapping_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            LoquiXmlTranslation<Mapping>.Instance.CopyIn(
                missing: missing,
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void CopyIn_Xml(
            string path,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node);
        }

        public void CopyIn_Xml(
            string path,
            out Mapping_ErrorMask errorMask,
            Mapping_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Mapping_ErrorMask errorMask,
            Mapping_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Mapping_ErrorMask errorMask,
            bool doMasks = true,
            Mapping_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Mapping_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Mapping_ErrorMask errorMask,
            Mapping_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out Mapping_ErrorMask errorMask,
            Mapping_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            Mapping_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            MappingCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Mapping_FieldIndex)index)
            {
                case Mapping_FieldIndex.Nickname:
                case Mapping_FieldIndex.BinaryPath:
                case Mapping_FieldIndex.FolderPath:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public Mapping Copy(
            Mapping_CopyMask copyMask = null,
            IMappingGetter def = null)
        {
            return Mapping.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Mapping Copy(
            IMapping item,
            Mapping_CopyMask copyMask = null,
            IMappingGetter def = null)
        {
            Mapping ret;
            if (item.GetType().Equals(typeof(Mapping)))
            {
                ret = new Mapping();
            }
            else
            {
                ret = (Mapping)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Mapping Copy_ToLoqui(
            IMappingGetter item,
            Mapping_CopyMask copyMask = null,
            IMappingGetter def = null)
        {
            Mapping ret;
            if (item.GetType().Equals(typeof(Mapping)))
            {
                ret = new Mapping() as Mapping;
            }
            else
            {
                ret = (Mapping)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(IMappingGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IMappingGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IMappingGetter rhs,
            Mapping_CopyMask copyMask,
            IMappingGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IMappingGetter rhs,
            out Mapping_ErrorMask errorMask,
            Mapping_CopyMask copyMask = null,
            IMappingGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MappingCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Mapping_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IMappingGetter rhs,
            ErrorMaskBuilder errorMask,
            Mapping_CopyMask copyMask = null,
            IMappingGetter def = null,
            bool doMasks = true)
        {
            MappingCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            Mapping_FieldIndex enu = (Mapping_FieldIndex)index;
            switch (enu)
            {
                case Mapping_FieldIndex.Nickname:
                    this.Nickname = (String)obj;
                    break;
                case Mapping_FieldIndex.BinaryPath:
                    this.BinaryPath = (FilePath)obj;
                    break;
                case Mapping_FieldIndex.FolderPath:
                    this.FolderPath = (DirectoryPath)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            MappingCommon.Clear(this);
        }


        public static Mapping Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Mapping();
            foreach (var pair in fields)
            {
                CopyInInternal_Mapping(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Mapping(Mapping obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Mapping_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Mapping_FieldIndex.Nickname:
                    obj.Nickname = (String)pair.Value;
                    break;
                case Mapping_FieldIndex.BinaryPath:
                    obj.BinaryPath = (FilePath)pair.Value;
                    break;
                case Mapping_FieldIndex.FolderPath:
                    obj.FolderPath = (DirectoryPath)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IMapping : IMappingGetter, ILoquiClass<IMapping, IMappingGetter>, ILoquiClass<Mapping, IMappingGetter>
    {
        new String Nickname { get; set; }

        new FilePath BinaryPath { get; set; }

        new DirectoryPath FolderPath { get; set; }

    }

    public partial interface IMappingGetter : ILoquiObject
    {
        #region Nickname
        String Nickname { get; }

        #endregion
        #region BinaryPath
        FilePath BinaryPath { get; }

        #endregion
        #region FolderPath
        DirectoryPath FolderPath { get; }

        #endregion

    }

    #endregion

}

namespace BethesdaGitSync.Internals
{
    #region Field Index
    public enum Mapping_FieldIndex
    {
        Nickname = 0,
        BinaryPath = 1,
        FolderPath = 2,
    }
    #endregion

    #region Registration
    public class Mapping_Registration : ILoquiRegistration
    {
        public static readonly Mapping_Registration Instance = new Mapping_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_BethesdaGitSync.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_BethesdaGitSync.ProtocolKey,
            msgID: 2,
            version: 0);

        public const string GUID = "15afffaa-eeaa-40c5-b515-ca20a34e4b76";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Mapping_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Mapping_ErrorMask);

        public static readonly Type ClassType = typeof(Mapping);

        public static readonly Type GetterType = typeof(IMappingGetter);

        public static readonly Type SetterType = typeof(IMapping);

        public static readonly Type CommonType = typeof(MappingCommon);

        public const string FullName = "BethesdaGitSync.Mapping";

        public const string Name = "Mapping";

        public const string Namespace = "BethesdaGitSync";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NICKNAME":
                    return (ushort)Mapping_FieldIndex.Nickname;
                case "BINARYPATH":
                    return (ushort)Mapping_FieldIndex.BinaryPath;
                case "FOLDERPATH":
                    return (ushort)Mapping_FieldIndex.FolderPath;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Mapping_FieldIndex enu = (Mapping_FieldIndex)index;
            switch (enu)
            {
                case Mapping_FieldIndex.Nickname:
                case Mapping_FieldIndex.BinaryPath:
                case Mapping_FieldIndex.FolderPath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Mapping_FieldIndex enu = (Mapping_FieldIndex)index;
            switch (enu)
            {
                case Mapping_FieldIndex.Nickname:
                case Mapping_FieldIndex.BinaryPath:
                case Mapping_FieldIndex.FolderPath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Mapping_FieldIndex enu = (Mapping_FieldIndex)index;
            switch (enu)
            {
                case Mapping_FieldIndex.Nickname:
                case Mapping_FieldIndex.BinaryPath:
                case Mapping_FieldIndex.FolderPath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Mapping_FieldIndex enu = (Mapping_FieldIndex)index;
            switch (enu)
            {
                case Mapping_FieldIndex.Nickname:
                    return "Nickname";
                case Mapping_FieldIndex.BinaryPath:
                    return "BinaryPath";
                case Mapping_FieldIndex.FolderPath:
                    return "FolderPath";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Mapping_FieldIndex enu = (Mapping_FieldIndex)index;
            switch (enu)
            {
                case Mapping_FieldIndex.Nickname:
                case Mapping_FieldIndex.BinaryPath:
                case Mapping_FieldIndex.FolderPath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Mapping_FieldIndex enu = (Mapping_FieldIndex)index;
            switch (enu)
            {
                case Mapping_FieldIndex.Nickname:
                case Mapping_FieldIndex.BinaryPath:
                case Mapping_FieldIndex.FolderPath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Mapping_FieldIndex enu = (Mapping_FieldIndex)index;
            switch (enu)
            {
                case Mapping_FieldIndex.Nickname:
                    return typeof(String);
                case Mapping_FieldIndex.BinaryPath:
                    return typeof(FilePath);
                case Mapping_FieldIndex.FolderPath:
                    return typeof(DirectoryPath);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class MappingCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IMapping item,
            IMappingGetter rhs,
            IMappingGetter def,
            ErrorMaskBuilder errorMask,
            Mapping_CopyMask copyMask)
        {
            if (copyMask?.Nickname ?? true)
            {
                errorMask?.PushIndex((int)Mapping_FieldIndex.Nickname);
                try
                {
                    item.Nickname = rhs.Nickname;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BinaryPath ?? true)
            {
                errorMask?.PushIndex((int)Mapping_FieldIndex.BinaryPath);
                try
                {
                    item.BinaryPath = rhs.BinaryPath;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FolderPath ?? true)
            {
                errorMask?.PushIndex((int)Mapping_FieldIndex.FolderPath);
                try
                {
                    item.FolderPath = rhs.FolderPath;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IMapping item)
        {
            item.Nickname = default(String);
            item.BinaryPath = default(FilePath);
            item.FolderPath = default(DirectoryPath);
        }

        public static Mapping_Mask<bool> GetEqualsMask(
            this IMappingGetter item,
            IMappingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Mapping_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IMappingGetter item,
            IMappingGetter rhs,
            Mapping_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Nickname = string.Equals(item.Nickname, rhs.Nickname);
            ret.BinaryPath = string.Equals(item.BinaryPath, rhs.BinaryPath);
            ret.FolderPath = string.Equals(item.FolderPath, rhs.FolderPath);
        }

        public static string ToString(
            this IMappingGetter item,
            string name = null,
            Mapping_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IMappingGetter item,
            FileGeneration fg,
            string name = null,
            Mapping_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Mapping)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Mapping)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Nickname ?? true)
                {
                    fg.AppendLine($"Nickname => {item.Nickname}");
                }
                if (printMask?.BinaryPath ?? true)
                {
                    fg.AppendLine($"BinaryPath => {item.BinaryPath}");
                }
                if (printMask?.FolderPath ?? true)
                {
                    fg.AppendLine($"FolderPath => {item.FolderPath}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IMappingGetter item,
            Mapping_Mask<bool?> checkMask)
        {
            return true;
        }

        public static Mapping_Mask<bool> GetHasBeenSetMask(IMappingGetter item)
        {
            var ret = new Mapping_Mask<bool>();
            ret.Nickname = true;
            ret.BinaryPath = true;
            ret.FolderPath = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            IMappingGetter item,
            bool doMasks,
            out Mapping_ErrorMask errorMask,
            Mapping_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Mapping_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            IMappingGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "BethesdaGitSync.Mapping");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "BethesdaGitSync.Mapping");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this IMappingGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Mapping_FieldIndex.Nickname) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Nickname),
                    item: item.Nickname,
                    fieldIndex: (int)Mapping_FieldIndex.Nickname,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Mapping_FieldIndex.BinaryPath) ?? true))
            {
                FilePathXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BinaryPath),
                    item: item.BinaryPath,
                    fieldIndex: (int)Mapping_FieldIndex.BinaryPath,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Mapping_FieldIndex.FolderPath) ?? true))
            {
                DirectoryPathXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FolderPath),
                    item: item.FolderPath,
                    fieldIndex: (int)Mapping_FieldIndex.FolderPath,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this Mapping item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MappingCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this Mapping item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Nickname":
                    if ((translationMask?.GetShouldTranslate((int)Mapping_FieldIndex.Nickname) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Mapping_FieldIndex.Nickname);
                            if (StringXmlTranslation.Instance.Parse(
                                node: node,
                                item: out String NicknameParse,
                                errorMask: errorMask))
                            {
                                item.Nickname = NicknameParse;
                            }
                            else
                            {
                                item.Nickname = default(String);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "BinaryPath":
                    if ((translationMask?.GetShouldTranslate((int)Mapping_FieldIndex.BinaryPath) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Mapping_FieldIndex.BinaryPath);
                            if (FilePathXmlTranslation.Instance.Parse(
                                node: node,
                                item: out FilePath BinaryPathParse,
                                errorMask: errorMask))
                            {
                                item.BinaryPath = BinaryPathParse;
                            }
                            else
                            {
                                item.BinaryPath = default(FilePath);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "FolderPath":
                    if ((translationMask?.GetShouldTranslate((int)Mapping_FieldIndex.FolderPath) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Mapping_FieldIndex.FolderPath);
                            if (DirectoryPathXmlTranslation.Instance.Parse(
                                node: node,
                                item: out DirectoryPath FolderPathParse,
                                errorMask: errorMask))
                            {
                                item.FolderPath = FolderPathParse;
                            }
                            else
                            {
                                item.FolderPath = default(DirectoryPath);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Mapping_Mask<T> : IMask<T>, IEquatable<Mapping_Mask<T>>
    {
        #region Ctors
        public Mapping_Mask()
        {
        }

        public Mapping_Mask(T initialValue)
        {
            this.Nickname = initialValue;
            this.BinaryPath = initialValue;
            this.FolderPath = initialValue;
        }
        #endregion

        #region Members
        public T Nickname;
        public T BinaryPath;
        public T FolderPath;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Mapping_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Mapping_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Nickname, rhs.Nickname)) return false;
            if (!object.Equals(this.BinaryPath, rhs.BinaryPath)) return false;
            if (!object.Equals(this.FolderPath, rhs.FolderPath)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Nickname?.GetHashCode());
            ret = ret.CombineHashCode(this.BinaryPath?.GetHashCode());
            ret = ret.CombineHashCode(this.FolderPath?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Nickname)) return false;
            if (!eval(this.BinaryPath)) return false;
            if (!eval(this.FolderPath)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Mapping_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Mapping_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Mapping_Mask<R> obj, Func<T, R> eval)
        {
            obj.Nickname = eval(this.Nickname);
            obj.BinaryPath = eval(this.BinaryPath);
            obj.FolderPath = eval(this.FolderPath);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Mapping_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Mapping_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Mapping_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Nickname ?? true)
                {
                    fg.AppendLine($"Nickname => {Nickname}");
                }
                if (printMask?.BinaryPath ?? true)
                {
                    fg.AppendLine($"BinaryPath => {BinaryPath}");
                }
                if (printMask?.FolderPath ?? true)
                {
                    fg.AppendLine($"FolderPath => {FolderPath}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Mapping_ErrorMask : IErrorMask, IErrorMask<Mapping_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Nickname;
        public Exception BinaryPath;
        public Exception FolderPath;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Mapping_FieldIndex enu = (Mapping_FieldIndex)index;
            switch (enu)
            {
                case Mapping_FieldIndex.Nickname:
                    return Nickname;
                case Mapping_FieldIndex.BinaryPath:
                    return BinaryPath;
                case Mapping_FieldIndex.FolderPath:
                    return FolderPath;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Mapping_FieldIndex enu = (Mapping_FieldIndex)index;
            switch (enu)
            {
                case Mapping_FieldIndex.Nickname:
                    this.Nickname = ex;
                    break;
                case Mapping_FieldIndex.BinaryPath:
                    this.BinaryPath = ex;
                    break;
                case Mapping_FieldIndex.FolderPath:
                    this.FolderPath = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Mapping_FieldIndex enu = (Mapping_FieldIndex)index;
            switch (enu)
            {
                case Mapping_FieldIndex.Nickname:
                    this.Nickname = (Exception)obj;
                    break;
                case Mapping_FieldIndex.BinaryPath:
                    this.BinaryPath = (Exception)obj;
                    break;
                case Mapping_FieldIndex.FolderPath:
                    this.FolderPath = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Nickname != null) return true;
            if (BinaryPath != null) return true;
            if (FolderPath != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Mapping_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Nickname => {Nickname}");
            fg.AppendLine($"BinaryPath => {BinaryPath}");
            fg.AppendLine($"FolderPath => {FolderPath}");
        }
        #endregion

        #region Combine
        public Mapping_ErrorMask Combine(Mapping_ErrorMask rhs)
        {
            var ret = new Mapping_ErrorMask();
            ret.Nickname = this.Nickname.Combine(rhs.Nickname);
            ret.BinaryPath = this.BinaryPath.Combine(rhs.BinaryPath);
            ret.FolderPath = this.FolderPath.Combine(rhs.FolderPath);
            return ret;
        }
        public static Mapping_ErrorMask Combine(Mapping_ErrorMask lhs, Mapping_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Mapping_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Mapping_ErrorMask();
        }
        #endregion

    }
    public class Mapping_CopyMask
    {
        public Mapping_CopyMask()
        {
        }

        public Mapping_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Nickname = defaultOn;
            this.BinaryPath = defaultOn;
            this.FolderPath = defaultOn;
        }

        #region Members
        public bool Nickname;
        public bool BinaryPath;
        public bool FolderPath;
        #endregion

    }

    public class Mapping_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Nickname;
        public bool BinaryPath;
        public bool FolderPath;
        #endregion

        #region Ctors
        public Mapping_TranslationMask()
        {
        }

        public Mapping_TranslationMask(bool defaultOn)
        {
            this.Nickname = defaultOn;
            this.BinaryPath = defaultOn;
            this.FolderPath = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Nickname, null));
            ret.Add((BinaryPath, null));
            ret.Add((FolderPath, null));
        }
    }
    #endregion

    #endregion

}
